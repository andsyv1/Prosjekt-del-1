
softblink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b7  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042c  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8init_PWMv>:

#define LED_PIN PD6

void init_PWM() {
	// Set PD6 (OC0A) as an output
	DDRD |= (1 << LED_PIN);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 64       	ori	r24, 0x40	; 64
  84:	8a b9       	out	0x0a, r24	; 10

	// Set the Timer/Counter 0 to Fast PWM mode with non-inverted output
	TCCR0A = (1 << WGM01) | (1 << WGM00) | (1 << COM0A1);
  86:	83 e8       	ldi	r24, 0x83	; 131
  88:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00);  // No prescaler, running at full speed
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	85 bd       	out	0x25, r24	; 37

	// Set the initial PWM duty cycle (brightness)
	OCR0A = 128;  // Adjust this value for desired brightness
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	87 bd       	out	0x27, r24	; 39
  92:	08 95       	ret

00000094 <main>:
}

int main(void) {
	init_PWM();
  94:	0e 94 40 00 	call	0x80	; 0x80 <_Z8init_PWMv>

	while (1) {
		// Soft blink by changing the PWM duty cycle
		for (int brightness = 0; brightness <= 255; brightness++) {
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	91 05       	cpc	r25, r1
  a0:	09 f0       	breq	.+2      	; 0xa4 <main+0x10>
  a2:	4c f4       	brge	.+18     	; 0xb6 <main+0x22>
			OCR0A = brightness;
  a4:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	e3 ec       	ldi	r30, 0xC3	; 195
  a8:	f9 e0       	ldi	r31, 0x09	; 9
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1c>
  b0:	00 00       	nop
int main(void) {
	init_PWM();

	while (1) {
		// Soft blink by changing the PWM duty cycle
		for (int brightness = 0; brightness <= 255; brightness++) {
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	f3 cf       	rjmp	.-26     	; 0x9c <main+0x8>
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	90 e0       	ldi	r25, 0x00	; 0
			OCR0A = brightness;
			_delay_ms(10);  // Adjust this delay for the soft blink speed
		}

		for (int brightness = 255; brightness >= 0; brightness--) {
  ba:	99 23       	and	r25, r25
  bc:	6c f3       	brlt	.-38     	; 0x98 <main+0x4>
			OCR0A = brightness;
  be:	87 bd       	out	0x27, r24	; 39
  c0:	e3 ec       	ldi	r30, 0xC3	; 195
  c2:	f9 e0       	ldi	r31, 0x09	; 9
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x30>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x36>
  ca:	00 00       	nop
		for (int brightness = 0; brightness <= 255; brightness++) {
			OCR0A = brightness;
			_delay_ms(10);  // Adjust this delay for the soft blink speed
		}

		for (int brightness = 255; brightness >= 0; brightness--) {
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f5 cf       	rjmp	.-22     	; 0xba <main+0x26>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
